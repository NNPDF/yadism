# -*- coding: utf-8 -*-
import numpy as np
from scipy.special import spence


def li2(x):
    return spence(1 - x)


lnomx = -2.0


def omx(y):
    return -7.0 / 2.0 + 2.0 * np.log(1.0 - y)


def f2sv(y):
    return (
        1.0
        / 6.0
        * (
            -15.0
            - 4.0 * np.pi ** 2
            + 9.0 * np.log(1.0 - y)
            + 12.0 * li2(y / (-1.0 + y))
        )
    )


def f1sv(y):
    return f2sv(y) - 1.0 / y * np.log(1.0 - y)


def f3sv(y):
    return f1sv(y)


def f1r(y, z):
    P1 = 1.0 / (1.0 - z)
    P2 = np.log(1.0 - z) * P1
    return -(
        (
            P2
            * (
                y ** 4
                + y ** 2 * (-13 + (-8 + y) * y) * z ** 2
                + 8 * y * (3 + 5 * y) * z ** 3
                - 2 * (5 + 8 * y * (4 + y)) * z ** 4
                + 8 * (3 + 5 * y) * z ** 5
                + (-13 + (-8 + y) * y) * z ** 6
                + z ** 8
            )
        )
        / ((y - z) * (y - z ** 2) ** 3)
    ) + (
        P1
        * (
            y ** 4
            - 6 * y ** 3 * (2 + y) * z
            - 2 * y ** 2 * (-19 + (-13 + y) * y) * z ** 2
            + 2 * y * (-10 + y * (-34 + 7 * y)) * z ** 3
            + 2 * (10 + (34 - 7 * y) * y) * z ** 5
            + 2 * (-19 + (-13 + y) * y) * z ** 6
            + 6 * (2 + y) * z ** 7
            - z ** 8
            - 2
            * (
                y ** 4
                + y ** 2 * (-13 + (-8 + y) * y) * z ** 2
                + 8 * y * (3 + 5 * y) * z ** 3
                - 2 * (5 + 8 * y * (4 + y)) * z ** 4
                + 8 * (3 + 5 * y) * z ** 5
                + (-13 + (-8 + y) * y) * z ** 6
                + z ** 8
            )
            * np.log(z / (-y + z))
        )
    ) / (
        2.0 * (y - z) * (y - z ** 2) ** 3
    )


def f2r(y, z):
    P1 = 1.0 / (1.0 - z)
    P2 = np.log(1.0 - z) * P1
    return -(
        (
            P2
            * (-1 + y)
            * z ** 2
            * (
                -(z ** 6 * (5 + (-4 + z) * z))
                + y ** 5 * (1 + z ** 2)
                + y ** 4 * (-1 + z * (8 - 21 * z + 4 * z ** 3))
                + y ** 2 * z ** 2 * (-5 - (-2 + z) * z * (34 + 7 * z * (-10 + 3 * z)))
                + y ** 3 * z * (4 + z * (-47 + z * (112 - 50 * z + z ** 3)))
                + y * z ** 4 * (-20 + z * (68 + z * (-47 + z * (8 + z))))
            )
        )
        / ((y - z) * (y - z ** 2) ** 5)
    ) - (
        P1
        * (-1 + y)
        * z ** 2
        * (
            -(y ** 4 * (3 + y))
            + 2 * y ** 3 * (5 + y * (22 + y)) * z
            + 2 * y ** 3 * (-54 + y * (-41 + 3 * y)) * z ** 2
            + 6 * y ** 2 * (5 + y * (30 + y)) * z ** 3
            - 6 * y * (5 + y * (30 + y)) * z ** 5
            + 2 * y * (54 + (41 - 3 * y) * y) * z ** 6
            - 2 * (5 + y * (22 + y)) * z ** 7
            + (3 + y) * z ** 8
            + 2
            * (
                -(z ** 6 * (5 + (-4 + z) * z))
                + y ** 5 * (1 + z ** 2)
                + y ** 4 * (-1 + z * (8 - 21 * z + 4 * z ** 3))
                + y ** 2 * z ** 2 * (-5 - (-2 + z) * z * (34 + 7 * z * (-10 + 3 * z)))
                + y ** 3 * z * (4 + z * (-47 + z * (112 - 50 * z + z ** 3)))
                + y * z ** 4 * (-20 + z * (68 + z * (-47 + z * (8 + z))))
            )
            * np.log(z / (-y + z))
        )
    ) / (
        2.0 * (y - z) * (y - z ** 2) ** 5
    )


def f3r(y, z):
    P1 = -1.0 / (1.0 - z)
    P2 = -np.log(1.0 - z) * P1
    return (
        P2
        * (-1 + y)
        * z
        * (
            y ** 3
            + y * (-3 + (-7 + y) * y) * z ** 2
            + 16 * y * z ** 3
            + (-3 + (-7 + y) * y) * z ** 4
            + z ** 6
        )
    ) / ((y - z) * (y - z ** 2) ** 3) + (
        P1
        * (-1 + y)
        * z
        * (
            (y - z ** 2)
            * (
                z ** 3 * (6 + z)
                + 2 * y * z * (3 + (-11 + z) * z)
                + y ** 2 * (1 + 2 * z + 4 * z ** 2)
            )
            + 2
            * (
                y ** 3
                + y * (-3 + (-7 + y) * y) * z ** 2
                + 16 * y * z ** 3
                + (-3 + (-7 + y) * y) * z ** 4
                + z ** 6
            )
            * np.log(z / (-y + z))
        )
    ) / (
        2.0 * (y - z) * (y - z ** 2) ** 3
    )
